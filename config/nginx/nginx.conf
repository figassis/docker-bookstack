charset utf-8;
server_tokens off;
log_format blocked '$time_local Blocked request from $remote_addr $request';
client_max_body_size 5M;

upstream backend {
    least_conn;
    server app:9000 max_fails=3 fail_timeout=15s;
}

server {
    listen 8000 default_server;
    client_max_body_size 5M;
    root /var/www/html/public;
    index index.php index.html;
    
    access_log /opt/bitnami/nginx/logs/access.log;
    error_log /opt/bitnami/nginx/logs/error.log notice;
    
    # don't allow the browser to render the page inside an frame or iframe
    add_header X-Frame-Options SAMEORIGIN;

    # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
    add_header X-Content-Type-Options nosniff;

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    add_header X-XSS-Protection "1; mode=block" always;

    add_header X-Powered-By "";
    add_header X-Pingback "";
    add_header SERVER "";
    add_header X-UA-Compatible "IE=edge";
    add_header Cache-Control "no-transform";
    
    add_header Referrer-Policy "no-referrer-when-downgrade";
    
    # BLock bad user agents
    location ~ \.(appcache|crx|css|eot|gif|htc|ico|jpe?g|js|m4a|m4v|manifest|mp4|oex|oga|ogg|ogv|otf|pdf|png|safariextz|svgz?|ttf|vcf|webapp|webm|webp|woff|xml|xpi)$ {
        add_header X-UA-Compatible "";
    }

    #Enable all for now
    add_header Access-Control-Allow-Origin *;
    location ~* \.(eot|font.css|otf|ttc|ttf|woff)$ {
        add_header Access-Control-Allow-Origin *;
    }

    if ($http_user_agent ~* (binlar|casper|cmsworldmap|comodo|diavol|dotbot|feedfinder|flicky|ia_archiver|jakarta|kmccrew|nutch|planetwork|purebot|pycurl|skygrid|sucker|turnit|vikspider|zmeu) ) {
        return 403;
    }

    # this prevents hidden files (beginning with a period) from being served
    location ~ /\. {
        access_log                      off;
        log_not_found                   off;
        deny                            all;
    }

    # SEND EXPIRES HEADERS AND TURN OFF 404 LOGGING
    location ~* ^.+.(xml|ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
        access_log                      off;
        log_not_found                   off;
        expires                         max;
    }

    location /health.html {
        access_log off;
        return 200 "healthy\n";
    }

    # Deny access to any files with a .php extension in the uploads directory
    # Works in sub-directory installs and also in multisite network
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
    location ~* /(?:uploads|files)/.*\.php$ {
        return 404;
    }

    location ~ ^/\.user\.ini {
        return 404;
    }

    location ~ ^/\.htaccess {
        return 404;
    }

    if (!-e $request_filename){
        rewrite ^(.*)$ /index.php break;
    }

    location / {

        try_files $uri $uri/ /index.php?$query_string;
        #set_cookie_flag requires an additional module: https://github.com/AirisX/nginx_cookie_flag_module
        #set_cookie_flag Secret HttpOnly secure SameSite;
        proxy_cookie_path / "/; HTTPOnly;   Secure";

        #rewrite ^/(.*)$ /index.php?$1;

        set $susquery 0;
        if ($susquery = 1) { return 403; }
    }

    # Block access to specific files
    location ~ /\.ht { return 403; }
    location ~ readme.html { return 403; }
    location ~ readme.txt { return 403; }
    location ~ /\.git { return 403; }
    location ^(.*)/uploads/(.*).php(.?){ return 403; }
    location = /favicon.ico { access_log off; log_not_found off; }  
    location = /robots.txt { allow all; access_log off; log_not_found off; }
    location ~ /\. { deny  all; access_log off; log_not_found off; }
    location ~ /\.git { access_log off; log_not_found off; return 403; }
    location ~* \.(pl|cgi|py|sh|lua)\$ { return 444; }
    location ~* (roundcube|webdav|smtp|http\:|soap|w00tw00t) { return 444; }
    location ~* (?:^|/)\. { return 403; }
    location ~* (?:\.(?:bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist)|~)$ { return 403; }
    location ~* \.(engine|inc|info|install|make|module|profile|test|po|sh|.*sql|theme|tpl(\.php)?|xtmpl)$|^(\..*|Entries.*|Repository|Root|Tag|Template)$|\.php_ { return 444; }

    ## Block SQL injections
    location ~* union.*select.*\( { access_log /opt/bitnami/nginx/logs/nginx-blocked.log blocked; return 403; }
    location ~* union.*all.*select.* { access_log /opt/bitnami/nginx/logs/nginx-blocked.log blocked; return 403; }
    location ~* concat.*\( { access_log /opt/bitnami/nginx/logs/nginx-blocked.log blocked; return 403; }

    ## Block common exploits
    location ~* (<|%3C).*script.*(>|%3E) { access_log /opt/bitnami/nginx/logs/nginx-blocked.log blocked; return 403; }
    location ~* base64_(en|de)code\(.*\) { access_log /opt/bitnami/nginx/logs/nginx-blocked.log blocked; return 403; }
    location ~* (%24&x) { access_log /opt/bitnami/nginx/logs/nginx-blocked.log blocked; return 403; }
    location ~* (%0|%A|%B|%C|%D|%E|%F|127\.0) { access_log /opt/bitnami/nginx/logs/nginx-blocked.log blocked; return 403; }
    location ~* \.\.\/  { access_log /opt/bitnami/nginx/logs/nginx-blocked.log blocked; return 403; }
    location ~* ~$ { access_log /opt/bitnami/nginx/logs/nginx-blocked.log blocked; return 403; }
    location ~* proc/self/environ { access_log /opt/bitnami/nginx/logs/nginx-blocked.log blocked; return 403; }
    location ~* /\.(htaccess|htpasswd|svn) { access_log /opt/bitnami/nginx/logs/nginx-blocked.log blocked; return 403; }

    ## Block file injections
    location ~* [a-zA-Z0-9_]=(\.\.//?)+ { access_log /opt/bitnami/nginx/logs/nginx-blocked.log blocked; return 403; }
    location ~* [a-zA-Z0-9_]=/([a-z0-9_.]//?)+ { access_log /opt/bitnami/nginx/logs/nginx-blocked.log blocked; return 403; }

    location ~ \.(css|js|jpe?g|png|gif|pdf|eot|otf|ttf|woff|woff2|map|svg)$ { }
    
    # Pass PHP requests to PHP-FPM
    location ~ \.php$ {
        fastcgi_split_path_info ^(.+?\.php)(/.*)$;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_index index.php;
        include fastcgi_params;

        fastcgi_pass backend;
    }
}